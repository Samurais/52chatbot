webpackJsonp([2,48],{337:function(n,i){n.exports={rawContent:'\nMaximum Likelihood Estimation for Linear Regression with Tensorflow\n# 了解似然函数\nhttps://en.wikipedia.org/wiki/Maximum_likelihood_estimation\n\n# 最大似然算法\nhttps://zh.wikipedia.org/wiki/%E4%BC%BC%E7%84%B6%E5%87%BD%E6%95%B0\n\n# TensorFlow线性回归的例子\nhttps://stackoverflow.com/questions/41885665/maximum-likelihood-linear-regression-tensorflow\n\nexample:\n\n```python\n#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n#===============================================================================\n#\n# Copyright (c) 2017 Hai Liang Wang, All Rights Reserved\n#\n#\n# File: linear_regression_tensorflow.py\n# Author: Hai Liang Wang\n# Date: 2017-08-01:15:03:17\n#\n#===============================================================================\n\nfrom __future__ import print_function\nfrom __future__ import division\n\nimport tensorflow as tf\nimport numpy as np\n\ngraph = tf.Graph()\n\nwith graph.as_default():\n    # Ops and variables pinned to the CPU because of missing GPU implementation\n    with tf.device(\'/cpu:0\'):\n        X = tf.placeholder("float", None)\n        Y = tf.placeholder("float", None)\n        theta_0 = tf.Variable(np.random.randn())\n        theta_1 = tf.Variable(np.random.randn())\n        var = tf.Variable(0.5)\n\n        # y = theta_0 + (x * theta_1)\n        hypothesis = tf.add(theta_0, tf.mul(X, theta_1))\n        lhf = 1 * (50 * np.log(2*np.pi) + 50 * tf.log(var) + (1/(2*var)) * tf.reduce_sum(tf.pow(hypothesis - Y, 2)))\n        op = tf.train.GradientDescentOptimizer(0.01).minimize(lhf)\n\n        # Add variable initializer.\n        init = tf.global_variables_initializer()\n\nwith tf.Session(graph=graph) as session:\n    # We must initialize all variables before we use them.\n    init.run()\n    print("Initialized")\n\n    train_X = np.random.rand(100, 1) # all values [0-1)\n    train_Y = train_X\n    feed_dict = {X: train_X, Y: train_Y}\n    num_steps = 100001\n\n    for steps in range(num_steps):\n        _, loss, v0, v1 = session.run([op, lhf, theta_0, theta_1], feed_dict=feed_dict)\n        # since x == y, theta_0 should be 0 and theta_1 should be 1.\n        print(\'Run step %s, loss %s, theta_0 %s, theta_1 %s\' % (steps, loss, v0, v1))\n```\n\n![](http://7xkeqi.com1.z0.glb.clouddn.com/chatbot/images/2017/08/maximum-likelihood-estimation-1.png)\n\nmore examples:\nhttps://github.com/Samurais/maximum-likelihood-estimation\n\n# references\n\n[Likelihood_function](https://en.wikipedia.org/wiki/Likelihood_function)\n\n[似然函数](https://zh.wikipedia.org/wiki/%E4%BC%BC%E7%84%B6%E5%87%BD%E6%95%B0)',metaData:{layout:"post",title:"最大似然估计",excerpt:"最大似然估计提供了一种给定观察数据来评估模型参数的方法，即：“模型已定，参数未知”。",category:"research",tags:["algorithm"],disqus:!0}}}});