webpackJsonp([1,43],{328:function(n,e){n.exports={rawContent:"\nThe HMM is a generative probabilistic model, in which a sequence of observable **X** variables is generated by a sequence of internal hidden states **Z**. The hidden states are not be observed directly. The transitions between hidden states are assumed to have the form of a (first-order) Markov chain. They can be specified by the start probability vector **π** and a transition probability matrix **A**. The emission probability of an observable can be any distribution with parameters **B** conditioned on the current hidden state. The HMM is completely determined by **π**, **A** and **B**.\n\n> From http://hmmlearn.readthedocs.io/en/latest/tutorial.html\n\n![](http://7xkeqi.com1.z0.glb.clouddn.com/chatbot/images/2017/06/hmm-hidden-weather-example.gif)\n\n举例来说，假设对于隐居室内的人，天气是隐含状态，海藻是可观察状态，海藻的状态和天气之间存在联系，通过观察海藻的状态来预测天气的状态。\n\n如果使用HMM模型，我们需要知道天气的初始状态，天气的状态转移矩阵和海藻的状态转移矩阵。\n\n## 概念\n* A - 隐含状态转移概率矩阵。\n描述了HMM模型中各个状态之间的转移概率。其中Aij = P( Sj | Si ),1≤i,,j≤N，表示在 t 时刻、状态为 Si 的条件下，在 t+1 时刻状态是 Sj 的概率。\n\n* B - 观测状态转移概率矩阵，也称为混淆矩阵\n令N代表隐含状态数目，M代表可观测状态数目，则：Bij = P( Oi | Sj ), 1≤i≤M,1≤j≤N，表示在 t 时刻、隐含状态是 Sj 条件下，观察状态为 Oi 的概率。\n\n* π - 初始状态概率矩阵\n表示隐含状态在初始时刻t=1的概率矩阵，(例如t=1时，P(S1)=p1、P(S2)=P2、P(S3)=p3，则初始状态概率矩阵 π=[ p1 p2 p3 ].\n\n对于包含M个客观察状态和N个隐含状态的HMM模型来说，用**λ={ π, A, B }**来表示HMM的参数。\n\n## HMM可以解决的问题\n\n* 根据可观察状态的序列找到一个最可能的隐藏状态序列\n\n一个广泛使用的例子，就是使用HMM+Viterbi算法完成词性标注任务。\n\n* 已知模型参数，计算某一给定可观察状态序列的概率\n\n*  根据观察到的序列集来找到一个最有可能的 HMM\nGiven just the observed data, estimate the model parameters.\n\nThe first and the second problem can be solved by the dynamic programming algorithms known as the Viterbi algorithm and the Forward-Backward algorithm, respectively. The last one can be solved by an iterative Expectation-Maximization (EM) algorithm, known as the Baum-Welch algorithm.\n\n\n## 三个重要假设\n这三个假设并不现实。\n\n假设1：马尔可夫假设（状态构成一阶马尔可夫链）\n![](http://7xkeqi.com1.z0.glb.clouddn.com/chatbot/images/2017/06/hmm-hidden-1.png)\n\n假设2：不动性假设（状态与具体时间无关）\n![](http://7xkeqi.com1.z0.glb.clouddn.com/chatbot/images/2017/06/hmm-hidden-2.png)\n\n假设3：输出独立性假设（输出仅与当前状态有关）\n![](http://7xkeqi.com1.z0.glb.clouddn.com/chatbot/images/2017/06/hmm-hidden-3.png)\n\n\n## [HMM in Python](https://github.com/hankcs/hidden-markov-model)\n\nCodes: https://github.com/hankcs/hidden-markov-model\n\n```python\nimport numpy as np\n\n\nclass HMM:\n    \"\"\"\n    Order 1 Hidden Markov Model\n\n    Attributes\n    ----------  \n    A : numpy.ndarray\n        State transition probability matrix\n    B: numpy.ndarray\n        Output emission probability matrix with shape(N, number of output types)\n    pi: numpy.ndarray\n        Initial state probablity vector\n\n    Common Variables\n    ----------------\n    obs_seq : list of int\n        list of observations (represented as ints corresponding to output\n        indexes in B) in order of appearance\n    T : int\n        number of observations in an observation sequence\n    N : int\n        number of states\n    \"\"\"\n\n    def __init__(self, A, B, pi):\n        self.A = A\n        self.B = B\n        self.pi = pi\n\n    def _forward(self, obs_seq):\n        N = self.A.shape[0]\n        T = len(obs_seq)\n\n        F = np.zeros((N, T))\n        F[:, 0] = self.pi * self.B[:, obs_seq[0]]\n\n        for t in range(1, T):\n            for n in range(N):\n                F[n, t] = np.dot(F[:, t - 1], (self.A[:, n])\n                                 ) * self.B[n, obs_seq[t]]\n\n        return F\n\n    def _backward(self, obs_seq):\n        N = self.A.shape[0]\n        T = len(obs_seq)\n\n        X = np.zeros((N, T))\n        X[:, -1:] = 1\n\n        for t in reversed(range(T - 1)):\n            for n in range(N):\n                X[n, t] = np.sum(X[:, t + 1] * self.A[n, :]\n                                 * self.B[:, obs_seq[t + 1]])\n\n        return X\n\n    def observation_prob(self, obs_seq):\n        \"\"\" P( entire observation sequence | A, B, pi ) \"\"\"\n        return np.sum(self._forward(obs_seq)[:, -1])\n\n    def state_path(self, obs_seq):\n        \"\"\"\n        Returns\n        -------\n        V[last_state, -1] : float\n            Probability of the optimal state path\n        path : list(int)\n            Optimal state path for the observation sequence\n        \"\"\"\n        V, prev = self.viterbi(obs_seq)\n\n        # Build state path with greatest probability\n        last_state = np.argmax(V[:, -1])\n        path = list(self.build_viterbi_path(prev, last_state))\n\n        return V[last_state, -1], reversed(path)\n\n    def viterbi(self, obs_seq):\n        \"\"\"\n        Returns\n        -------\n        V : numpy.ndarray\n            V [s][t] = Maximum probability of an observation sequence ending\n                       at time 't' with final state 's'\n        prev : numpy.ndarray\n            Contains a pointer to the previous state at t-1 that maximizes\n            V[state][t]\n        \"\"\"\n        N = self.A.shape[0]\n        T = len(obs_seq)\n        prev = np.zeros((T - 1, N), dtype=int)\n\n        # DP matrix containing max likelihood of state at a given time\n        V = np.zeros((N, T))\n        V[:, 0] = self.pi * self.B[:, obs_seq[0]]\n\n        for t in range(1, T):\n            for n in range(N):\n                seq_probs = V[:, t - 1] * self.A[:, n] * self.B[n, obs_seq[t]]\n                prev[t - 1, n] = np.argmax(seq_probs)\n                V[n, t] = np.max(seq_probs)\n\n        return V, prev\n\n    def build_viterbi_path(self, prev, last_state):\n        \"\"\"Returns a state path ending in last_state in reverse order.\"\"\"\n        T = len(prev)\n        yield(last_state)\n        for i in range(T - 1, -1, -1):\n            yield(prev[i, last_state])\n            last_state = prev[i, last_state]\n\n    def simulate(self, T):\n\n        def draw_from(probs):\n            return np.where(np.random.multinomial(1, probs) == 1)[0][0]\n\n        observations = np.zeros(T, dtype=int)\n        states = np.zeros(T, dtype=int)\n        states[0] = draw_from(self.pi)\n        observations[0] = draw_from(self.B[states[0], :])\n        for t in range(1, T):\n            states[t] = draw_from(self.A[states[t - 1], :])\n            observations[t] = draw_from(self.B[states[t], :])\n        return observations, states\n\n    def baum_welch_train(self, observations, criterion=0.05):\n        n_states = self.A.shape[0]\n        n_samples = len(observations)\n\n        done = False\n        while not done:\n            # alpha_t(i) = P(O_1 O_2 ... O_t, q_t = S_i | hmm)\n            # Initialize alpha\n            alpha = self._forward(observations)\n\n            # beta_t(i) = P(O_t+1 O_t+2 ... O_T | q_t = S_i , hmm)\n            # Initialize beta\n            beta = self._backward(observations)\n\n            xi = np.zeros((n_states, n_states, n_samples - 1))\n            for t in range(n_samples - 1):\n                denom = np.dot(np.dot(\n                    alpha[:, t].T, self.A) * self.B[:, observations[t + 1]].T, beta[:, t + 1])\n                for i in range(n_states):\n                    numer = alpha[i, t] * self.A[i, :] * self.B[:,\n                                                                observations[t + 1]].T * beta[:, t + 1].T\n                    xi[i, :, t] = numer / denom\n\n            # gamma_t(i) = P(q_t = S_i | O, hmm)\n            gamma = np.squeeze(np.sum(xi, axis=1))\n            # Need final gamma element for new B\n            prod = (alpha[:, n_samples - 1] *\n                    beta[:, n_samples - 1]).reshape((-1, 1))\n            # append one more to gamma!!!\n            gamma = np.hstack((gamma, prod / np.sum(prod)))\n\n            newpi = gamma[:, 0]\n            newA = np.sum(xi, 2) / \\\n                np.sum(gamma[:, :-1], axis=1).reshape((-1, 1))\n            newB = np.copy(self.B)\n\n            num_levels = self.B.shape[1]\n            sumgamma = np.sum(gamma, axis=1)\n            for lev in range(num_levels):\n                mask = observations == lev\n                newB[:, lev] = np.sum(gamma[:, mask], axis=1) / sumgamma\n\n            if np.max(abs(self.pi - newpi)) < criterion and \\\n                    np.max(abs(self.A - newA)) < criterion and \\\n                    np.max(abs(self.B - newB)) < criterion:\n                done = 1\n\n            self.A[:], self.B[:], self.pi[:] = newA, newB, newpi\n```\n\n### Test\n\n```python\nimport numpy as np\nimport hmm\n\nstates = ('Healthy', 'Fever')\n\nobservations = ('normal', 'cold', 'dizzy')\n\nstart_probability = {'Healthy': 0.6, 'Fever': 0.4}\n\ntransition_probability = {\n    'Healthy': {'Healthy': 0.7, 'Fever': 0.3},\n    'Fever': {'Healthy': 0.4, 'Fever': 0.6},\n}\n\nemission_probability = {\n    'Healthy': {'normal': 0.5, 'cold': 0.4, 'dizzy': 0.1},\n    'Fever': {'normal': 0.1, 'cold': 0.3, 'dizzy': 0.6},\n}\n\n\ndef generate_index_map(lables):\n    index_label = {}\n    label_index = {}\n    i = 0\n    for l in lables:\n        index_label[i] = l\n        label_index[l] = i\n        i += 1\n    return label_index, index_label\n\n\nstates_label_index, states_index_label = generate_index_map(states)\nobservations_label_index, observations_index_label = generate_index_map(\n    observations)\n\n\nprint(\"states_label_index\", states_label_index)\n\nprint(\"states_index_label\", states_index_label)\n\nprint(\"observations_label_index\", observations_label_index)\n\nprint(\"observations_index_label\", observations_index_label)\n\n```\n\n> 将隐性状态，显性状态存储在字典里：label->index, index->label。\n\n![result1](http://7xkeqi.com1.z0.glb.clouddn.com/chatbot/images/2017/06/hmm-result1.png)\n\n\n```python\n\ndef convert_observations_to_index(observations, label_index):\n    list = []\n    for o in observations:\n        list.append(label_index[o])\n    return list\n\n\ndef convert_map_to_vector(map, label_index):\n    v = np.empty(len(map), dtype=float)\n    for e in map:\n        v[label_index[e]] = map[e]\n    return v\n\n\ndef convert_map_to_matrix(map, label_index1, label_index2):\n    m = np.empty((len(label_index1), len(label_index2)), dtype=float)\n    for line in map:\n        for col in map[line]:\n            m[label_index1[line]][label_index2[col]] = map[line][col]\n    return m\n\n\nA = convert_map_to_matrix(\n    transition_probability,\n    states_label_index,\n    states_label_index)\n\nprint(\"A\", A)\n\nB = convert_map_to_matrix(\n    emission_probability,\n    states_label_index,\n    observations_label_index)\n\nprint(\"B\", B)\n```\n\n> 生成隐性状态的状态转移矩阵A: NxN。生成混淆矩阵：MxN。\n\n![result2](http://7xkeqi.com1.z0.glb.clouddn.com/chatbot/images/2017/06/hmm-result2.png)\n\n```\n\n# observations_index = convert_observations_to_index(\n#     observations, observations_label_index)\nobservations_index = [0, 1, 1, 2, 2, 2, 2, 1, 0]\npi = convert_map_to_vector(start_probability, states_label_index)\nprint('pi', pi)\nprint('observations_index', observations_index)\n\n\nh = hmm.HMM(A, B, pi)\nV, p = h.viterbi(observations_index)\nprint(\n    \" \" *\n    7,\n    \" \".join(\n        (\"%10s\" %\n         observations_index_label[i]) for i in observations_index))\nfor s in range(0, 2):\n    print(\n        \"%7s: \" %\n        states_index_label[s] +\n        \" \".join(\n            \"%10s\" %\n            (\"%f\" %\n             v) for v in V[s]))\nprint('\\nThe most possible states and probability are:')\np, ss = h.state_path(observations_index)\nfor s in ss:\n    print(states_index_label[s])\nprint('p', p)\n```\n\n> 根据一组观测到的观测状态序列，预测隐形状态的序列。\n\n![result3](http://7xkeqi.com1.z0.glb.clouddn.com/chatbot/images/2017/06/hmm-result3.png)\n\n```python\n# run a baum_welch_train\nobservations_data, states_data = h.simulate(100)\nprint('observations_data', observations_data)\nprint('states_data', states_data)\nguess = hmm.HMM(np.array([[0.5, 0.5],\n                          [0.5, 0.5]]),\n                np.array([[0.3, 0.3, 0.3],\n                          [0.3, 0.3, 0.3]]),\n                np.array([0.5, 0.5])\n                )\nguess.baum_welch_train(observations_data)\nstates_out = guess.state_path(observations_data)[1]\np = 0.0\nfor s in states_data:\n    if next(states_out) == s:\n        p += 1\n\nprint(p / len(states_data))\n```\n\n> 根据一组观察状态序列，推测最有可能的HMM参数。\n\n![result4](http://7xkeqi.com1.z0.glb.clouddn.com/chatbot/images/2017/06/hmm-result4.png)\n\n\n# Refers\n\n[Rabiner89]\t Lawrence R. Rabiner “A tutorial on hidden Markov models and selected applications in speech recognition”, Proceedings of the IEEE 77.2, pp. 257-286, 1989.\n\n[Bilmes98]\tJeff A. Bilmes, “A gentle tutorial of the EM algorithm and its application to parameter estimation for Gaussian mixture and hidden Markov models.”, 1998.\n\n[隐马尔可夫模型（HMM）攻略](http://blog.csdn.net/likelet/article/details/7056068)\n\n\n\n\n",metaData:{layout:"post",title:"隐马尔科夫模型",excerpt:"隐马尔可夫模型（Hidden Markov Model，HMM）是统计模型，它用来描述一个含有隐含未知参数的马尔可夫过程。其难点是从可观察的参数中确定该过程的隐含参数。然后利用这些参数来作进一步的分析，例如模式识别。",category:"research",tags:["probability","algorithm"],disqus:!0}}}});