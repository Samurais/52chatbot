webpackJsonp([1,62],{373:function(n,e){n.exports={rawContent:'\n本文转载自[【使用 CMake 组织 C++工程】3：CMake 函数和宏](https://elloop.github.io/tools/2016-04-11/learning-cmake-3-function-macro)\n\n# 前言\n\n这篇文章分享一下 CMake 中函数:function, 和宏：macro 的使用。本文先从二者区别说起，由于二者区别很小，所以后文就仅对函数的用法进行讨论，因为函数有作用域的概念，适用范围更广。后文分享一个很实用的递归函数用于包含指定目录的所有子目录。\n\n# CMake 中 function 和 macro 的区别\n\n从其官方文档的描述并不会看出二者有什么大的区别，除了在 function 的定义中提到了 Scope 的概念。\n\n下面以 StackOverflow 上的一个例子来直观的了解一下二者的区别:\n\n```\nset(var "ABC")\n\nmacro(Moo arg)\nmessage("arg = ${arg}")\n  set(arg "abc")\n  message("# After change the value of arg.")\n  message("arg = ${arg}")\nendmacro()\nmessage("=== Call macro ===")\nMoo(\\${var})\n\nfunction(Foo arg)\nmessage("arg = ${arg}")\n  set(arg "abc")\n  message("# After change the value of arg.")\n  message("arg = ${arg}")\nendfunction()\nmessage("=== Call function ===")\nFoo(\\${var})\n```\n\n输出结果是：\n\n<!--more-->\n\n```\n➜ /Users/sunyongjian1/codes/local_codes/cmake_test/build cmake ..\n=== Call macro ===\narg = ABC\n\n# After change the value of arg.\n\narg = ABC\n=== Call function ===\narg = ABC\n\n# After change the value of arg.\n\narg = abc\n```\n\n可以看到，Moo 这个宏的表现与 C 语言中的宏类似，仅仅是做字符串的替换; Foo 函数里 arg 则是被赋值为 var 的值，在 Foo 内部可以修改这个 arg 变量的值。\n\n个人感觉, 对于 CMake 里的函数和宏的使用原则可以以 C 语言里函数和宏的使用原则来作为参考。下面就着重说一下我在组织工程的时候对于 function 的常见用法。\n\n# function 的使用技巧\n\n## 如何按引用来传递参数？(在 function 中修改外部作用域的值)\n\n**答：通过名字来传递变量**\n\n例如：有一个 var 变量，在函数外部定义，要通过调用一个函数 f1, 来修改 var 的值\n\n```\nset(var "abc") # 定义一个变量 var，初值为 abc\n\nfunction(f1 arg)\nset(${arg} "ABC" PARENT_SCOPE)  # ${arg} == var, 于是相当于 set(var "ABC" PARENT_SCOPE)\nendfunction()\n\nmessage("before calling f1, var = ${var}")\nf1(var)                                     # 如果写成了f1(${var})会怎样？\nmessage("after calling f1, var = \\${var}")\n```\n\n结果：\n\n```\n➜ /Users/sunyongjian1/codes/local_codes/cmake_test/build cmake ..\nbefore calling f1, var = abc\nafter calling f1, var = ABC\n```\n\n需要注意的两点：\n\n- 函数调用处用变量的名字 var，而不是它的值\\${var}\n\n- 在函数内部，set 的时候，要加上作用域 PARENT_SCOPE.\n\n试试写成`f1(${var})`:\n\n```\nset(var "abc") # 定义一个变量 var，初值为 abc\n\nfunction(f1 arg)\nset(${arg} "ABC" PARENT_SCOPE)  # ${arg} == var, 于是相当于 set(var "ABC" PARENT_SCOPE)\nendfunction()\n\nmessage("before calling f1, abc = ${abc}")\nf1(${var})\nmessage("after calling f1, abc = \\${abc}")\n```\n\n输出是：\n\n```\n\n➜ /Users/sunyongjian1/codes/local_codes/cmake_test/build cmake ..\nbefore calling f1, abc =\nafter calling f1, abc = ABC\n```\n\n如果写成了 `f1(${var})`, 那么先计算表达式`${var}`, 即相当于调用 f1(abc), 调用结果是在函数的父作用域定义了一个 abc 变量.\n\n其实在了解了参数展开之后，这个问题很显而易见，本质上就是调用了一个`set(<var-name> <var-value> <var-scope>)`, 只不过如果需要通过函数来包装他的话就要注意传参传过来的东西是个变量名还是变量的值。\n\n## 如何传递列表类型的参数？\n\n如果我要打印一个列表要怎么写？\n\n```\nset(arg hello world)\n\nforeach(v ${arg})\n    message(${v})\nendforeach()\n```\n\n输出：\n\n```\n\n➜ /Users/sunyongjian1/codes/local_codes/cmake_test/build cmake ..\nhello\nworld\n```\n\n在调试 CMake 脚本的时候，可能经常用到这种打印列表的代码，于是很自然的我需要写一个打印列表的函数：`print_list`\n\n实现很简单，只要把上面那个 foreach 丢到一个函数体里面就好了\n\n```\nfunction(print_list arg)\nforeach(v ${arg})\n        message(${v})\nendforeach()\nendfunction()\n```\n\n现在来调用一下这个函数：\n\n```\n\nset(arg hello world)\n\nprint_list(\\${arg})\n```\n\n输出结果：\n\n```\n➜ /Users/sunyongjian1/codes/local_codes/cmake_test/build cmake ..\nhello\n```\n\n<font color="red">应该是 hello world 才对，怎么会只有一个 hello ? </font>\n\n这几乎是初学者必犯的错误，问题出在对`print_list`的调用方式上：\n\n`print_list(${arg})` 展开来看就是 `print_list(hello world)`, 因此，传递给`print_list`的第一个参数只有 hello。\n\n<font color="red">正确的调用方式应该是下面这样，使用双引号把参数括起来:</font>\n\n```\n\nprint_list("\\${arg}")\n```\n\n输出：\n\n```\n➜ /Users/sunyongjian1/codes/local_codes/cmake_test/build cmake ..\nhello\nworld\n```\n\n<font color="red">函数里几个有用的隐含参数：</font>\n\n| _name_   | _description_                                                      |\n| -------- | ------------------------------------------------------------------ |\n| ARGC     | 函数实参的个数                                                     |\n| ARGV     | 所有实参列表                                                       |\n| ARGN     | 所有额外实参列表, 即 ARGV 去掉函数声明时显示指定的实参，剩余的实参 |\n| ARGV0    | 函数第 1 个实参                                                    |\n| ARGV1    | 函数第 2 个实参                                                    |\n| ARGV2    | 函数第 3 个实参                                                    |\n| 依次类推 | 依次类推                                                           |\n\n使用上面表格里的几个隐含参数，通过下面这个例子可以更好的说明上面两种传递参数的方式，函数内部发生了什么。\n\n```\n\nfunction(print_list arg)\nmessage("======= args count : \\${ARGC} ======= ") # 实际实参个数\n\n    message("======= all args ======= ")                # 打印所有参数\n    foreach(v IN LISTS ARGV)\n        message(${v})\n    endforeach()\n\n\n    message("======= all extra args ======= ")          # 打印所有额外参数\n    foreach(v IN LISTS ARGN)\n        message(${v})\n    endforeach()\n\n    message("======= print content of ARGV0 ======= ")  # 打印第一个参数里的所有内容\n    foreach(v IN LISTS ARGV0)\n        message(${v})\n    endforeach()\n\nendfunction()\n\nset(arg hello world)\n\nmessage("------------ calling with qutoes -----------") # 使用引号来调用\nprint_list("\\${arg}")\n\nmessage("------------ calling without qutoes -----------") # 不使用引号调用\nprint_list(\\${arg})\n```\n\n输出：\n\n```\n➜ /Users/sunyongjian1/codes/local_codes/cmake_test/build cmake ..\n------------ calling with qutoes -----------\n======= args count : 1 =======\n======= all args =======\nhello\nworld\n======= all extra args =======\n======= print content of ARGV0 =======\nhello\nworld\n------------ calling without qutoes -----------\n======= args count : 2 =======\n======= all args =======\nhello\nworld\n======= all extra args =======\nworld\n======= print content of ARGV0 =======\nhello\n```\n\n从两个输出结果里可以看到：\n\n**1.使用引号包裹参数时**\n\n参数个数：1, 即 hello world\n额外参数个数: 0\n打印第一个参数的内容 = 要打印的列表内容\n\n**2.不使用引号包裹参数时**\n\n参数个数：2, 分别是 hello 和 world\n额外参数个数: 1, world\n打印第一个参数的内容 = hello\n\n在不使用括号包裹的情况下，因为函数只需要一个参数，列表里除了第一个元素的其它元素被当做额外的参数传给函数了，当我打印第一个参数的时候，就仅仅把列表的第一个元素打印出来了。\n\n通过这个例子可以看到，在不使用括号来包裹列表类型的参数作为函数实参时，列表参数内部的空格（或者分号）会使得这个列表的内容被当做多个参数传递给函数。\n\n# CMake 里的函数支持递归调用吗？\n\n经过我的测试，答案是肯定的。\n\nCMake 里面有个命令就带有递归的含义：\n\n`file(GLOB_RECURSE cpp_list ./*.cpp)`\n\n这个 file 命令，使用`GLOB_RECURSE`参数的时候即表示递归搜索的意思，上面这句话的意思是递归搜索当前目录及其子目录下的所有.cpp 文件，把其完整路径放入列表`cpp_list`中。\n\n通常情况下，确定了所有源文件的路径，对于一个工程的构建来说就已经完成了一大半，剩下的问题就是库和头文件的搜索路径。而库的搜索路径通常很简单，因为通常不需要链接很多的库，并且库可以统一存放。最后的问题就是头文件的搜索路径问题，在一个组织良好的项目里，公用的头文件通常放在一个公共的 include 路径，业务逻辑里的头文件通常和其源文件放在相同的路径下，此时在其源文件中使用`#include`时候，即使没有写完整的包含路径，仅仅写`#include "header.h"`也能够编译通过。然而在某些情况下，例如如在的目录树结构：\n\n```\n\nsrc\n├── a\n│ └── a.cpp\n├── b\n│ └── bb\n│ ├── a.h\n│ ├── bb.cpp\n│ └── bb.h\n├── c\n│ └── cc\n│ └── ccc\n│ ├── ccc.cpp\n│ └── ccc.h\n├── d\n│ └── dd\n│ └── ddd\n│ └── dddd\n│ ├── d.cpp\n│ └── d.h\n└── main.cpp\n\n10 directories, 9 files\n```\n\n某程序员放错了 a.h 的位置，并且他的编码习惯也很差，在 a.cpp 里的头部，他这样编写了 include:\n\n```\n#include "a.h"\n#include "bb.h"\n#include "ccc.h"\n#include "dddd.h"\n// ...\n```\n\n此时，在构建项目的时候就必须把 src/b/bb, src/c/cc/ccc, src/d/dd/ddd/dddd 都放入头文件包含路径，否则 a.cpp 的编译肯定会报错找不到这几个头文件。\n\n也许你觉得添加这几个路径挺容易的，但是考虑一下更惨的情况，数百个 cpp 文件，每个 cpp 不知道包含了哪个.h, 不知道被包含的.h 分散在某个子目录下，我如果挨个找头文件，挨个添加包含目录会不会很惨？\n\n所以，我需要一个函数，递归的搜索指定目录的子目录，把所有的子目录添加到 include 路径里。简单粗暴！\n\n**下面就是我要分享的函数：**\n\n```\n\nfunction(include_sub_directories_recursively root_dir)\nif (IS_DIRECTORY ${root_dir})               # 当前路径是一个目录吗，是的话就加入到包含目录\n        message("include dir: " ${root_dir})\ninclude_directories(\\${root_dir})\nendif()\n\n    file(GLOB ALL_SUB RELATIVE ${root_dir} ${root_dir}/*) # 获得当前目录下的所有文件，让如ALL_SUB列表中\n    foreach(sub ${ALL_SUB})\n        if (IS_DIRECTORY ${root_dir}/${sub})\n            include_sub_directories_recursively(${root_dir}/${sub}) # 对子目录递归调用，包含\n        endif()\n    endforeach()\n\nendfunction()\n```\n\n对于刚才的目录结构，\n\n```\n➜ /Users/sunyongjian1/codes/local_codes/cmake_test l\ntotal 8\ndrwxr-xr-x 5 lina staff 170B 4 18 18:21 .\ndrwxr-xr-x 8 lina staff 272B 4 7 23:38 ..\n-rw-r--r-- 1 lina staff 1.4K 4 18 18:21 CMakeLists.txt\ndrwxr-xr-x 6 lina staff 204B 4 18 18:21 build\ndrwxr-xr-x 7 lina staff 238B 4 18 17:48 src\n```\n\n使用我这个函数来解决包含问题：`include_sub_directories_recursively(${CMAKE_CURRENT_LIST_DIR}/src)`\n\n这句话，会把当前 CMakeLists.txt 所在目录下 src 的所有子目录(包括 src 目录)加入到包含路径。\n\n输出结果是：\n\n```\n\n➜ /Users/sunyongjian1/codes/local_codes/cmake_test/build cmake ..\ninclude dir: /Users/sunyongjian1/codes/local_codes/cmake_test/src\ninclude dir: /Users/sunyongjian1/codes/local_codes/cmake_test/src/a\ninclude dir: /Users/sunyongjian1/codes/local_codes/cmake_test/src/b\ninclude dir: /Users/sunyongjian1/codes/local_codes/cmake_test/src/b/bb\ninclude dir: /Users/sunyongjian1/codes/local_codes/cmake_test/src/c\ninclude dir: /Users/sunyongjian1/codes/local_codes/cmake_test/src/c/cc\ninclude dir: /Users/sunyongjian1/codes/local_codes/cmake_test/src/c/cc/ccc\ninclude dir: /Users/sunyongjian1/codes/local_codes/cmake_test/src/d\ninclude dir: /Users/sunyongjian1/codes/local_codes/cmake_test/src/d/dd\ninclude dir: /Users/sunyongjian1/codes/local_codes/cmake_test/src/d/dd/ddd\ninclude dir: /Users/sunyongjian1/codes/local_codes/cmake_test/src/d/dd/ddd/dddd\n-- Configuring done\n-- Generating done\n-- Build files have been written to: /Users/sunyongjian1/codes/local_codes/cmake_test/build\n```\n\n可以看到所有的子目录都被加入到包含路径了。\n\n**为什么自己写，而不用 file(GLOB_RECURSE ... ) ?**\n\n因为 file 命令搜到的是带文件名的完整路径，我需要的是目录。\n\n对于这个函数在实际组织项目中的应用，请参考我[这个项目的 CMake 脚本](https://github.com/elloop/CS.cpp)，在下一篇 CMake 文章里，我将分享一下这个项目使用 CMake 来组织的过程。\n\n# 参考链接\n\n- [cmake-language](https://cmake.org/cmake/help/v3.0/manual/cmake-language.7.html)\n\n- [CMake Documentation(V3.0 为例)](https://cmake.org/cmake/help/v3.0/)\n\n- [CMake 变量](https://cmake.org/cmake/help/v3.0/manual/cmake-commands.7.html)\n\n- [function 的定义](https://cmake.org/cmake/help/v3.0/command/function.html#command:function)\n\n- [macro 的定义](https://cmake.org/cmake/help/v3.0/command/macro.html#command:macro)\n\n---\n',metaData:{layout:"post",title:"CMake进阶教程（二）",excerpt:"CMake 函数和宏",category:"development",tags:["cpp"],disqus:!0}}}});